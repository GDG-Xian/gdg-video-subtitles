1
00:00:00,500 --> 00:00:03,380
如果你曾有过花费数天去解决一个bug的经历
If you've ever spent days chasing a bug in your code

2
00:00:03,380 --> 00:00:05,490
又或是等你把一个app发布到应用商店时
or released an app to the store only to find out

3
00:00:05,490 --> 00:00:08,080
才发现它有性能上的问题  那么你将会感激
it has performance problems, you will appreciate

4
00:00:08,080 --> 00:00:09,740
接下来这个新的编译与调试功能
the new debugging and testing features

5
00:00:09,740 --> 00:00:12,140
我们已经将它们加入到了最新版本的Android Studio中
we've added in recent versions of Android Studio.

6
00:00:12,140 --> 00:00:13,440
让我们一起来看一下
Let's take a look.

7
00:00:13,440 --> 00:00:15,810
首先  添加memory monitor
Up first, joining the memory monitor

8
00:00:15,810 --> 00:00:18,660
在之前的版本中出现了很久的
that was available on Android Studio for some time

9
00:00:18,660 --> 00:00:20,590
是这个新的CPU monitor
is the new CPU monitor.

10
00:00:20,590 --> 00:00:23,590
这些工具可以让你直观地看到你的app运行状况
These tools give you an overview of how running your app

11
00:00:23,590 --> 00:00:27,340
以及它对硬件设备的影响  因此可以让你很容易察觉到性能问题
is affecting the device so you can spot performance problems early.

12
00:00:27,340 --> 00:00:29,550
你如果想得到更详细的信息
If you need to get more detailed information,

13
00:00:29,550 --> 00:00:31,900
你可以现在就进行Allocation Tracking
you can now start Tracking Object allocations,

14
00:00:31,900 --> 00:00:34,390
或者初始化一段memory dump用作稍后分析
initiate a memory dump for later analysis,

15
00:00:34,390 --> 00:00:38,480
甚至还可以直接从IDE中调用method  进行method tracing  
and even start tracing method calls straight from the IDE.

16
00:00:38,480 --> 00:00:40,130
这里还提供了新的performance captures窗格
There's also a new performance captures

17
00:00:40,130 --> 00:00:44,170
用作快速获取任何你所创建对象的内存资源占用信息
pane for quick access to any reports that you've created.

18
00:00:44,170 --> 00:00:46,960
它将变得非常有用  当你试图去发现内存泄露  
They can be useful when you're trying to find memory leaks

19
00:00:46,960 --> 00:00:51,000
或者想找到你app的核心部分时 
or identify performance critical sections of your app.

20
00:00:51,000 --> 00:00:53,910
但如果知道这些就更好了  比如直接找出内存泄露
But you know what's even better for figuring out where a memory

21
00:00:53,910 --> 00:00:56,810
来自哪里  或者知道与你所创建的对象
leak comes from, knowing which pieces of code

22
00:00:56,810 --> 00:00:59,350
相关的代码是哪些  以防止它们
hold references to your objects, preventing them

23
00:00:59,350 --> 00:01:01,310
被当成垃圾回收
from being garbage collected.

24
00:01:01,310 --> 00:01:03,350
现在这些信息我们可以立刻
You can see that information instantly

25
00:01:03,350 --> 00:01:05,550
通过life debugging session获知
during a life debugging session.

26
00:01:05,550 --> 00:01:08,070
首先  用debug按钮启动你的app
First, start your app using the debug button

27
00:01:08,070 --> 00:01:09,820
或者在代码中间运行
or attach to a writing process.

28
00:01:09,820 --> 00:01:12,490
连接成功后
After a successful connection, the IDE

29
00:01:12,490 --> 00:01:16,260
程序将会停在有断点的地方
will pause execution on any break points that you specify.

30
00:01:16,260 --> 00:01:19,330
你现在可以选择Show referring objects选项
Your can now select the Show referring objects command

31
00:01:19,330 --> 00:01:22,840
从任何当前变量中获知你所需要的信息
on any of the current variables to get the info you need.

32
00:01:22,840 --> 00:01:24,920
再来说说单步调试
And speaking of step-by-step debugging,

33
00:01:24,920 --> 00:01:27,800
你曾经遇到过在第三方库中使用单步调试
have you ever had to use it with some third-party library

34
00:01:27,800 --> 00:01:30,670
最后发现源代码无法读取的情况吗
where the source code was missing from your project?

35
00:01:30,670 --> 00:01:35,280
Android Studio现在内嵌全新的Java反编译器
Android Studio has you covered with a brand new built-in Java decompiler.

36
00:01:35,280 --> 00:01:37,300
从现在起  无论何时你需要读取类内部的源代码
From now on, whenever you need to check

37
00:01:37,300 --> 00:01:39,440
只要它们全部是JAR文件
the internals of a class when all you have is

38
00:01:39,440 --> 00:01:43,140
你只需用鼠标点一下  它们就会出现编辑器中
a JAR file is just one click away in the editor.

39
00:01:43,140 --> 00:01:44,720
并且你甚至可以设置断点
And you can even set break points

40
00:01:44,720 --> 00:01:48,260
从而在已编译的代码中进行单步调试
and do step-by-step debugging inside compiled code.

41
00:01:48,260 --> 00:01:49,930
是不是很酷
How cool is that?

42
00:01:49,930 --> 00:01:52,780
Android Studio 1.2 另一个值得一提的功能
One of the other nifty features that come with Android Studio

43
00:01:52,780 --> 00:01:56,610
就是局部变量的同行显示
1.2 is the inlining of values for local variables

44
00:01:56,610 --> 00:01:59,280
局部变量的值会显示在同一行的右方当debugging时  
right there in the Code Editor when debugging.

45
00:01:59,280 --> 00:02:02,300
因此你不必再去variables窗格中找它们了
So you don't have to look for them in the variables pane.

46
00:02:02,300 --> 00:02:05,740
并且  当你的鼠标停在操作符上时
Also, notice that when you mouse over an operator expression,

47
00:02:05,740 --> 00:02:08,400
你当即就可以看到运算结果
you can now see the resulting value in a pop-up

48
00:02:08,400 --> 00:02:10,270
同样  当你鼠标停在变量上时
just like when you mouse over variables

49
00:02:10,270 --> 00:02:13,160
就可以获取到更多详细信息
to inspect them in more detail.

50
00:02:13,160 --> 00:02:15,230
但是你也知道  debugging最难的部分
But you know what the worst thing about debugging

51
00:02:15,230 --> 00:02:17,900
就是debugging本身
is, it's the debugging itself.

52
00:02:17,900 --> 00:02:20,930
这也是为什么你先得反复测试你的apps
That's why you should be testing your apps in the first place.

53
00:02:20,930 --> 00:02:24,100
随着Gradle plug-in和Android Studio的升级
And with recent enhancements in our Gradle plug-in and Android

54
00:02:24,100 --> 00:02:28,710
现在有了新的途径进行编写和自动测试了
Studio, there's now new ways to write and run automated tests.

55
00:02:28,710 --> 00:02:30,620
无论你是从事基于测试的开发
Whether you're doing test-driven development

56
00:02:30,620 --> 00:02:33,010
还是仅仅只想快速地测试你的程序
or just want to test your code quickly,

57
00:02:33,010 --> 00:02:36,520
对设备反复部署测试一直很让人头疼
one of the main pain points was having to deploy test to the device.

58
00:02:36,520 --> 00:02:38,730
并且我们都知道这很花时间
And we all know that takes time.

59
00:02:38,730 --> 00:02:41,380
从Andriod Studio 1.1以后
Starting from Android Studio 1.1,

60
00:02:41,380 --> 00:02:43,860
他们可以支持使用local JVM在你的开发中
there is support for running unit tests on your development

61
00:02:43,860 --> 00:02:46,780
进行单元测试
machine using the local JVM.

62
00:02:46,780 --> 00:02:49,570
要使用这个功能  首先将你的JUnit tests
To use this feature, first put your JUnit tests

63
00:02:49,570 --> 00:02:52,590
放入你的Android module的test文件夹中
in the test folder on your Android module.

64
00:02:52,590 --> 00:02:54,260
Gradle将会创建一个特殊版本的
Gradle will create a special version

65
00:02:54,260 --> 00:02:58,070
Android JAR到类路径中当你运行测试程序时
of Android JAR in the class path when you run the test task.

66
00:02:58,070 --> 00:03:01,450
注意这个JAR实际上不包含任何工作代码
Be aware that this JAR doesn't actually contain working code,

67
00:03:01,450 --> 00:03:03,810
所以你不能使用任何framework类
so you can't use any framework classes.

68
00:03:03,810 --> 00:03:05,935
你应该使用常用的mocking库
You should use one of the popular mocking libraries

69
00:03:05,935 --> 00:03:10,360
比如MOckito  去模拟你所需要的Android依赖项
like MOckito to mock the Android dependencies that you need.

70
00:03:10,360 --> 00:03:12,450
对那些需要运行在设备上的测试程序
For tests that need to run on the device

71
00:03:12,450 --> 00:03:14,700
往往需要完整的framework
where the full framework is required,

72
00:03:14,700 --> 00:03:17,480
这时你可以使用Android test source set
you can use the Android test source set.

73
00:03:17,480 --> 00:03:19,810
这些测试程序就在你app程序的旁边
These tests will be deployed alongside your app

74
00:03:19,810 --> 00:03:22,680
它们可以在指定设备上或者模拟器中运行
and run on the target device or emulator.

75
00:03:22,680 --> 00:03:25,660
然而严格意义上来说  下面的并不属于Android Studio或者Gradle的一部分
While not technically part of Android Studio or Gradle,

76
00:03:25,660 --> 00:03:27,740
但我们最近已经发布了一个库
we have recently released a library

77
00:03:27,740 --> 00:03:30,520
它包含很多可以帮你
that contains many classes that can help you with writing

78
00:03:30,520 --> 00:03:32,100
编写和运行你的测试程序的类
and running your tests.

79
00:03:32,100 --> 00:03:34,740
它就是Andriod Testing Support Library
It's called the Android Testing Support Library.

80
00:03:34,740 --> 00:03:38,030
它可以在Android Support Repository中获取
And it's available through the Android Support Repository.

81
00:03:38,030 --> 00:03:41,180
它提供了最新的  测试framework和API
It gives you the most up-to-date testing frameworks and APIs

82
00:03:41,180 --> 00:03:44,600
它由Google制造  包括一个Android Test Runner with JUnit
made by Google, including an Android Test Runner with JUnit

83
00:03:44,600 --> 00:03:46,540
和Espresso library
for support, the Espresso library

84
00:03:46,540 --> 00:03:50,550
用于功能性UI测试  和UIAutomator等等这些
for functional UI testing, the UIAutomator, and more.

85
00:03:50,550 --> 00:03:53,090
想知道如何用Android Testing Support Library
To find out how to set up your project for running tests

86
00:03:53,090 --> 00:03:55,320
去设置你的工程进行测试
using the Android Testing Support Library,

87
00:03:55,320 --> 00:03:59,090
点击这些链接  查看我们的文档和例程
follow these links and check out our documentation and samples.

88
00:03:59,090 --> 00:04:02,030
如果你有任何问题和建议关于使用Android Studio
If you have any questions or suggestions regarding debugging

89
00:04:02,030 --> 00:04:05,010
去debugging apps  你可以加入我们的讨论
apps using Android Studio, you can join the discussion

90
00:04:05,010 --> 00:04:06,800
在我们的Google+社区
in our Google+ community.

91
00:04:06,800 --> 00:04:07,622
再见咯
See ya.

92
00:04:07,622 --> 00:04:09,324
[MUSIC PLAYING]
